{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Create SignPreview Component Structure",
        "description": "Develop the core SignPreview component that accepts width, height, and unit as props and renders an SVG-based preview.",
        "details": "Create a new React component with TypeScript:\n\n```typescript\ninterface SignPreviewProps {\n  width: number;\n  height: number;\n  unit: string;\n}\n\nconst SignPreview: React.FC<SignPreviewProps> = ({ width, height, unit }) => {\n  // Validate dimensions\n  if (width <= 0 || height <= 0) {\n    return <div className=\"sign-preview-error\">Invalid dimensions</div>;\n  }\n\n  // Basic SVG structure with 220x220 viewBox\n  return (\n    <div className=\"sign-preview-container\">\n      <svg \n        viewBox=\"0 0 220 220\" \n        xmlns=\"http://www.w3.org/2000/svg\"\n        className=\"sign-preview\"\n      >\n        {/* Sign rectangle will be added in Task 2 */}\n        {/* Labels and guides will be added in Task 3 */}\n      </svg>\n    </div>\n  );\n};\n\nexport default SignPreview;\n```\n\nAdd basic styling with styled-components:\n\n```typescript\nconst PreviewContainer = styled.div`\n  width: 100%;\n  max-width: 300px;\n  margin: 0 auto;\n  transition: all 200ms ease-out;\n`;\n\nconst StyledSVG = styled.svg`\n  width: 100%;\n  height: auto;\n  border: 1px solid #e5e7eb;\n  border-radius: 8px;\n  background-color: #f9fafb;\n`;\n```\n\nIntegrate the component into the existing QuoteWizard Step 1, replacing the static preview placeholder:\n\n```typescript\n// In QuoteWizard Step 1\nimport SignPreview from './SignPreview';\n\n// Within the render method\n<SignPreview \n  width={formState.width} \n  height={formState.height} \n  unit={formState.unit} \n/>\n```",
        "testStrategy": "1. Unit test the component with various valid and invalid props combinations\n2. Verify component renders without errors\n3. Check that error state is displayed when invalid dimensions are provided\n4. Confirm SVG viewBox is correctly set to 220x220\n5. Verify component integration in QuoteWizard Step 1\n6. Test that component receives updates from form state",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Implement Scaling Algorithm",
        "description": "Develop the proportional scaling algorithm that maintains aspect ratio and properly sizes the sign within the viewBox constraints.",
        "details": "Enhance the SignPreview component with scaling logic:\n\n```typescript\nconst SignPreview: React.FC<SignPreviewProps> = ({ width, height, unit }) => {\n  // Validation code from Task 1\n  \n  // Calculate aspect ratio and dimensions\n  const aspectRatio = width / height;\n  \n  // Determine optimal scaling (max size 160 units, min 28 units)\n  let scaledWidth, scaledHeight;\n  \n  if (aspectRatio >= 1) { // Landscape or square\n    scaledWidth = Math.min(160, Math.max(28, 160));\n    scaledHeight = scaledWidth / aspectRatio;\n    \n    // Ensure minimum height\n    if (scaledHeight < 28) {\n      scaledHeight = 28;\n      scaledWidth = scaledHeight * aspectRatio;\n    }\n  } else { // Portrait\n    scaledHeight = Math.min(160, Math.max(28, 160));\n    scaledWidth = scaledHeight * aspectRatio;\n    \n    // Ensure minimum width\n    if (scaledWidth < 28) {\n      scaledWidth = 28;\n      scaledHeight = scaledWidth / aspectRatio;\n    }\n  }\n  \n  // Calculate position to center in viewBox\n  const xPosition = (220 - scaledWidth) / 2;\n  const yPosition = (220 - scaledHeight) / 2;\n  \n  return (\n    <div className=\"sign-preview-container\">\n      <svg \n        viewBox=\"0 0 220 220\" \n        xmlns=\"http://www.w3.org/2000/svg\"\n        className=\"sign-preview\"\n      >\n        {/* Sign rectangle with rounded corners */}\n        <rect\n          x={xPosition}\n          y={yPosition}\n          width={scaledWidth}\n          height={scaledHeight}\n          rx=\"8\"\n          fill=\"white\"\n          stroke=\"#1E3A8A\"\n          strokeWidth=\"2\"\n          className=\"sign-shape\"\n        />\n        {/* Labels and guides will be added in Task 3 */}\n      </svg>\n    </div>\n  );\n};\n```\n\nAdd transition styling for smooth dimension changes:\n\n```typescript\nconst StyledRect = styled.rect`\n  transition: all 200ms ease-out;\n`;\n```\n\nImplement a custom hook for memoizing calculations to optimize performance:\n\n```typescript\nfunction useSignDimensions(width: number, height: number) {\n  return useMemo(() => {\n    // Move calculation logic here\n    // Return calculated dimensions and positions\n    return { scaledWidth, scaledHeight, xPosition, yPosition };\n  }, [width, height]);\n}\n```",
        "testStrategy": "1. Unit test the scaling algorithm with various dimension combinations\n2. Test landscape, portrait, and square sign dimensions\n3. Verify minimum dimensions (28 units) are respected\n4. Confirm maximum dimensions (160 units) are not exceeded\n5. Test that the sign is properly centered in the viewBox\n6. Verify aspect ratio is maintained during scaling\n7. Test edge cases (very small or large dimensions, extreme aspect ratios)",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Add Visual Elements and Labels",
        "description": "Implement the dimension guides, labels, and formatting to provide clear visual feedback on sign dimensions.",
        "details": "Enhance the SignPreview component with visual elements:\n\n```typescript\nimport { useMemo } from 'react';\n\n// Number formatting utility\nconst formatNumber = (value: number): string => {\n  const formatter = new Intl.NumberFormat('en-US', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2\n  });\n  \n  return formatter.format(value);\n};\n\nconst SignPreview: React.FC<SignPreviewProps> = ({ width, height, unit }) => {\n  // Previous code from Tasks 1-2\n  \n  // Format dimension labels\n  const formattedWidth = formatNumber(width);\n  const formattedHeight = formatNumber(height);\n  const centralLabel = `${formattedWidth} Ã— ${formattedHeight} ${unit}`;\n  \n  return (\n    <div className=\"sign-preview-container\">\n      <svg viewBox=\"0 0 220 220\" xmlns=\"http://www.w3.org/2000/svg\">\n        {/* Sign rectangle from Task 2 */}\n        \n        {/* Central dimension label */}\n        <text\n          x=\"110\"\n          y=\"110\"\n          textAnchor=\"middle\"\n          dominantBaseline=\"middle\"\n          fill=\"#1E3A8A\"\n          fontSize=\"14\"\n          fontWeight=\"500\"\n          className=\"central-label\"\n        >\n          {centralLabel}\n        </text>\n        \n        {/* Width guide (bottom) */}\n        <line\n          x1={xPosition}\n          y1={yPosition + scaledHeight + 10}\n          x2={xPosition + scaledWidth}\n          y2={yPosition + scaledHeight + 10}\n          stroke=\"#1E3A8A\"\n          strokeWidth=\"1\"\n          strokeDasharray=\"4 2\"\n          className=\"guide-line\"\n        />\n        \n        {/* Width label */}\n        <text\n          x={xPosition + scaledWidth / 2}\n          y={yPosition + scaledHeight + 25}\n          textAnchor=\"middle\"\n          fill=\"#1E3A8A\"\n          fontSize=\"12\"\n          className=\"dimension-label\"\n        >\n          {`${formattedWidth} ${unit}`}\n        </text>\n        \n        {/* Height guide (right) */}\n        <line\n          x1={xPosition + scaledWidth + 10}\n          y1={yPosition}\n          x2={xPosition + scaledWidth + 10}\n          y2={yPosition + scaledHeight}\n          stroke=\"#1E3A8A\"\n          strokeWidth=\"1\"\n          strokeDasharray=\"4 2\"\n          className=\"guide-line\"\n        />\n        \n        {/* Height label */}\n        <text\n          x={xPosition + scaledWidth + 25}\n          y={yPosition + scaledHeight / 2}\n          textAnchor=\"middle\"\n          dominantBaseline=\"middle\"\n          fill=\"#1E3A8A\"\n          fontSize=\"12\"\n          transform={`rotate(90, ${xPosition + scaledWidth + 25}, ${yPosition + scaledHeight / 2})`}\n          className=\"dimension-label\"\n        >\n          {`${formattedHeight} ${unit}`}\n        </text>\n      </svg>\n    </div>\n  );\n};\n```\n\nAdd additional styling for the visual elements:\n\n```typescript\nconst StyledText = styled.text`\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  transition: all 200ms ease-out;\n`;\n\nconst GuideLine = styled.line`\n  transition: all 200ms ease-out;\n`;\n```",
        "testStrategy": "1. Test number formatting with various inputs (integers, decimals, large numbers)\n2. Verify central label displays correctly with proper formatting\n3. Test guide lines positioning for different sign dimensions\n4. Confirm external dimension labels are correctly positioned and formatted\n5. Verify text readability at various sign sizes\n6. Test that all elements transition smoothly during dimension changes\n7. Verify correct use of brand colors (#1E3A8A)\n8. Test with different unit types (inches, feet, cm, etc.)",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Performance Optimization and Browser Testing",
        "description": "Optimize the component for real-time updates, implement smooth transitions, and ensure cross-browser compatibility.",
        "details": "Optimize the SignPreview component for performance:\n\n```typescript\nimport React, { useMemo, useCallback } from 'react';\nimport styled from 'styled-components';\n\nconst SignPreview: React.FC<SignPreviewProps> = React.memo(({ width, height, unit }) => {\n  // Memoize calculations to prevent unnecessary re-renders\n  const { \n    scaledWidth, \n    scaledHeight, \n    xPosition, \n    yPosition,\n    formattedWidth,\n    formattedHeight,\n    centralLabel\n  } = useMemo(() => {\n    // Move all calculations here from previous tasks\n    // Return all computed values\n    return { \n      scaledWidth, \n      scaledHeight, \n      xPosition, \n      yPosition,\n      formattedWidth: formatNumber(width),\n      formattedHeight: formatNumber(height),\n      centralLabel: `${formatNumber(width)} Ã— ${formatNumber(height)} ${unit}`\n    };\n  }, [width, height, unit]);\n  \n  // Memoize the SVG elements to prevent unnecessary re-renders\n  const signRectangle = useMemo(() => (\n    <StyledRect\n      x={xPosition}\n      y={yPosition}\n      width={scaledWidth}\n      height={scaledHeight}\n      rx=\"8\"\n      fill=\"white\"\n      stroke=\"#1E3A8A\"\n      strokeWidth=\"2\"\n      className=\"sign-shape\"\n    />\n  ), [xPosition, yPosition, scaledWidth, scaledHeight]);\n  \n  // Similarly memoize other SVG elements\n  \n  return (\n    <PreviewContainer>\n      <StyledSVG viewBox=\"0 0 220 220\" xmlns=\"http://www.w3.org/2000/svg\">\n        {signRectangle}\n        {/* Other memoized elements */}\n      </StyledSVG>\n    </PreviewContainer>\n  );\n});\n\n// Add browser compatibility CSS\nconst PreviewContainer = styled.div`\n  width: 100%;\n  max-width: 300px;\n  margin: 0 auto;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n`;\n\nconst StyledSVG = styled.svg`\n  width: 100%;\n  height: auto;\n  border: 1px solid #e5e7eb;\n  border-radius: 8px;\n  background-color: #f9fafb;\n  \n  @media (prefers-reduced-motion: reduce) {\n    * {\n      transition: none !important;\n    }\n  }\n`;\n```\n\nImplement debouncing for dimension input changes to prevent excessive re-renders:\n\n```typescript\n// In the parent component that manages form state\nimport { useDebounce } from 'use-debounce';\n\nfunction QuoteWizardStep1() {\n  const [dimensions, setDimensions] = useState({ width: 48, height: 24, unit: 'in' });\n  \n  // Debounce dimension changes for smoother updates\n  const [debouncedDimensions] = useDebounce(dimensions, 100);\n  \n  return (\n    <div>\n      {/* Form inputs */}\n      <SignPreview \n        width={debouncedDimensions.width} \n        height={debouncedDimensions.height} \n        unit={debouncedDimensions.unit} \n      />\n    </div>\n  );\n}\n```\n\nAdd browser compatibility testing setup:\n\n```javascript\n// browser-compatibility.test.js\nimport { render } from '@testing-library/react';\nimport SignPreview from './SignPreview';\n\ndescribe('SignPreview Browser Compatibility', () => {\n  test('renders correctly with vendor prefixes', () => {\n    const { container } = render(\n      <SignPreview width={48} height={24} unit=\"in\" />\n    );\n    \n    // Check for critical rendering elements\n    expect(container.querySelector('svg')).toBeInTheDocument();\n    expect(container.querySelector('.sign-shape')).toBeInTheDocument();\n    expect(container.querySelector('.central-label')).toBeInTheDocument();\n  });\n});\n```",
        "testStrategy": "1. Measure render performance using React DevTools Profiler\n2. Test real-time updates with rapid dimension changes\n3. Verify smooth transitions with 200ms ease-out animations\n4. Test cross-browser compatibility on Chrome 90+, Firefox 88+, Safari 14+, and Edge 90+\n5. Verify accessibility features (SVG aria attributes, color contrast)\n6. Test with reduced motion preferences\n7. Verify performance on lower-end devices\n8. Conduct end-to-end testing in the QuoteWizard flow\n9. Verify no regression in existing functionality\n10. Test with various screen sizes and resolutions",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-10-01T01:10:50.849Z",
      "updated": "2025-10-01T01:11:39.487Z",
      "description": "Tasks for master context"
    }
  },
  "contacts-companies": {
    "tasks": [
      {
        "id": 1,
        "title": "Set up project structure for Contacts and Companies modules",
        "description": "Create the foundational directory structure for the Contacts and Companies modules, establish TypeScript interfaces, and install required dependencies for form handling, validation, notifications, and file uploads.",
        "details": "This task involves setting up the core project structure to support Contacts and Companies modules:\n\n1. Create the following directory structure:\n   - `app/contacts/` - For Contact-related pages and routes\n   - `app/companies/` - For Company-related pages and routes\n   - `components/contacts/` - For Contact-specific components\n   - `components/companies/` - For Company-specific components\n   - `components/shared/` - For reusable components across modules\n   - `lib/types/` - For TypeScript interfaces and type definitions\n   - `lib/services/` - For API and service functions\n   - `lib/utils/` - For utility functions\n   - `lib/hooks/` - For custom React hooks\n\n2. Set up base TypeScript interfaces in `lib/types/`:\n   ```typescript\n   // lib/types/contact.ts\n   export interface Contact {\n     id?: string;\n     firstName: string;\n     lastName: string;\n     email: string;\n     phone?: string;\n     companyId?: string;\n     notes?: string;\n     createdAt?: Date;\n     updatedAt?: Date;\n   }\n   \n   // lib/types/company.ts\n   export interface Company {\n     id?: string;\n     name: string;\n     industry?: string;\n     website?: string;\n     address?: string;\n     employees?: number;\n     notes?: string;\n     createdAt?: Date;\n     updatedAt?: Date;\n   }\n   ```\n\n3. Install required dependencies:\n   ```bash\n   npm install react-hook-form zod react-hot-toast react-dropzone\n   # or\n   yarn add react-hook-form zod react-hot-toast react-dropzone\n   ```\n\n4. Create index files in each directory to facilitate imports:\n   ```typescript\n   // Example: lib/types/index.ts\n   export * from './contact';\n   export * from './company';\n   ```\n\n5. Add a README.md in each directory explaining its purpose and usage guidelines.\n\nThis structure will provide a solid foundation for building out the Contacts and Companies modules with proper separation of concerns and type safety.",
        "testStrategy": "To verify the correct implementation of this task:\n\n1. Directory Structure Verification:\n   - Run a script or manually check that all specified directories exist:\n     ```bash\n     ls -la app/contacts/ app/companies/ components/contacts/ components/companies/ components/shared/ lib/types/ lib/services/ lib/utils/ lib/hooks/\n     ```\n   - Ensure each directory has appropriate permissions and is accessible.\n\n2. TypeScript Interface Verification:\n   - Validate that the Contact and Company interfaces exist in the correct location.\n   - Run TypeScript compiler to check for any type errors:\n     ```bash\n     npx tsc --noEmit\n     ```\n   - Attempt to import the types in a test file to ensure they're properly exported:\n     ```typescript\n     import { Contact, Company } from '@/lib/types';\n     ```\n\n3. Dependencies Installation Verification:\n   - Check package.json to confirm all required dependencies are listed with appropriate versions.\n   - Run `npm list` or `yarn list` to verify the dependencies are installed.\n   - Create a simple test component that imports and uses each dependency to ensure they're working:\n     ```typescript\n     import { useForm } from 'react-hook-form';\n     import { z } from 'zod';\n     import toast from 'react-hot-toast';\n     import { useDropzone } from 'react-dropzone';\n     ```\n\n4. Project Structure Documentation:\n   - Verify README.md files exist in each directory with appropriate documentation.\n   - Ensure index files are properly exporting the necessary types and components.\n\n5. Git Status Check:\n   - Run `git status` to ensure all new files are tracked and ready to be committed.",
        "status": "pending",
        "dependencies": [],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Update BaseLayout navigation to include Contacts and Companies tabs",
        "description": "Modify the BaseLayout component to add navigation items for Contacts and Companies, ensuring they link to the correct routes and maintain consistent styling in both desktop and mobile views.",
        "details": "This task involves updating the navigation menu in the BaseLayout component to include new tabs for the Contacts and Companies modules:\n\n1. Locate and open the file `components/layout/BaseLayout.tsx`\n\n2. Find the navigation array/configuration (likely named `navItems`, `navigationLinks`, or similar)\n\n3. Add two new navigation items in an appropriate position:\n   ```tsx\n   // Example addition to navigation array\n   {\n     name: 'Contacts',\n     href: '/contacts',\n     icon: ContactsIcon, // Use an appropriate icon from your icon library\n   },\n   {\n     name: 'Companies',\n     href: '/companies',\n     icon: BuildingOfficeIcon, // Use an appropriate icon from your icon library\n   }\n   ```\n\n4. Ensure the navigation items are properly ordered according to the application's information architecture (typically: Dashboard, Contacts, Companies, etc.)\n\n5. Verify that the mobile menu implementation also includes these new navigation items\n   - Check if there's a separate array for mobile navigation or if it reuses the main navigation\n   - If separate, add the same items to the mobile navigation array\n\n6. Apply consistent styling by following existing patterns:\n   - Maintain the same component structure for each navigation item\n   - Use the same styling props and classes\n   - Ensure active state styling works correctly for the new routes\n\n7. If there are any navigation-related tests, update them to include the new navigation items\n\n8. Check for any hardcoded navigation counts or references that might need updating",
        "testStrategy": "To verify the correct implementation of this task:\n\n1. Visual Inspection:\n   - Open the application in a browser\n   - Verify that the Contacts and Companies tabs appear in the navigation bar\n   - Confirm they are properly positioned in the navigation order\n   - Check that they use consistent styling with other navigation items\n\n2. Functionality Testing:\n   - Click on the Contacts tab and verify it navigates to `/contacts`\n   - Click on the Companies tab and verify it navigates to `/companies`\n   - Test the active state styling by navigating to each route and confirming the correct tab is highlighted\n\n3. Responsive Testing:\n   - Resize the browser to mobile viewport dimensions\n   - Verify that the mobile menu includes the new Contacts and Companies items\n   - Test navigation functionality in the mobile view\n\n4. Code Review:\n   - Confirm that the navigation array structure is maintained\n   - Verify that appropriate icons are used for the new navigation items\n   - Check that no styling inconsistencies were introduced\n\n5. Run any existing navigation or layout tests to ensure nothing was broken",
        "status": "pending",
        "dependencies": [
          1
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Create shared UI components for reusable elements",
        "description": "Build a set of reusable UI components in the components/shared/ directory including SearchBar, StatusBadge, TagPills, Pagination, EmptyState, LoadingSpinner, and ConfirmDialog components with TypeScript interfaces and Tailwind CSS styling.",
        "details": "This task involves creating a suite of reusable UI components that will be used across the Contacts and Companies modules:\n\n1. Create the following components in the `components/shared/` directory:\n\n   a. **SearchBar.tsx**:\n   ```tsx\n   interface SearchBarProps {\n     placeholder?: string;\n     initialValue?: string;\n     onSearch: (value: string) => void;\n     className?: string;\n   }\n   \n   export default function SearchBar({ placeholder = 'Search...', initialValue = '', onSearch, className = '' }: SearchBarProps) {\n     const [searchTerm, setSearchTerm] = useState(initialValue);\n     \n     // Implement debounced search using useEffect and setTimeout\n     useEffect(() => {\n       const timer = setTimeout(() => {\n         onSearch(searchTerm);\n       }, 300); // 300ms debounce delay\n       \n       return () => clearTimeout(timer);\n     }, [searchTerm, onSearch]);\n     \n     return (\n       <div className={`relative ${className}`}>\n         <input\n           type=\"text\"\n           value={searchTerm}\n           onChange={(e) => setSearchTerm(e.target.value)}\n           placeholder={placeholder}\n           className=\"w-full px-4 py-2 pl-10 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n         />\n         <SearchIcon className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n       </div>\n     );\n   }\n   ```\n\n   b. **StatusBadge.tsx**:\n   ```tsx\n   type StatusType = 'active' | 'inactive' | 'pending' | 'completed' | 'error';\n   \n   interface StatusBadgeProps {\n     status: StatusType;\n     label?: string;\n     className?: string;\n   }\n   \n   export default function StatusBadge({ status, label, className = '' }: StatusBadgeProps) {\n     const statusStyles: Record<StatusType, string> = {\n       active: 'bg-green-100 text-green-800 border-green-200',\n       inactive: 'bg-gray-100 text-gray-800 border-gray-200',\n       pending: 'bg-yellow-100 text-yellow-800 border-yellow-200',\n       completed: 'bg-blue-100 text-blue-800 border-blue-200',\n       error: 'bg-red-100 text-red-800 border-red-200',\n     };\n     \n     return (\n       <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${statusStyles[status]} ${className}`}>\n         {label || status}\n       </span>\n     );\n   }\n   ```\n\n   c. **TagPills.tsx**:\n   ```tsx\n   interface Tag {\n     id: string | number;\n     label: string;\n   }\n   \n   interface TagPillsProps {\n     tags: Tag[];\n     onRemove?: (tagId: string | number) => void;\n     className?: string;\n     editable?: boolean;\n   }\n   \n   export default function TagPills({ tags, onRemove, className = '', editable = false }: TagPillsProps) {\n     return (\n       <div className={`flex flex-wrap gap-2 ${className}`}>\n         {tags.map((tag) => (\n           <span \n             key={tag.id}\n             className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\"\n           >\n             {tag.label}\n             {editable && onRemove && (\n               <button\n                 type=\"button\"\n                 onClick={() => onRemove(tag.id)}\n                 className=\"ml-1.5 inline-flex items-center justify-center h-4 w-4 rounded-full text-blue-400 hover:bg-blue-200 hover:text-blue-600 focus:outline-none\"\n               >\n                 <span className=\"sr-only\">Remove tag</span>\n                 <XIcon className=\"h-3 w-3\" />\n               </button>\n             )}\n           </span>\n         ))}\n       </div>\n     );\n   }\n   ```\n\n   d. **Pagination.tsx**:\n   ```tsx\n   interface PaginationProps {\n     currentPage: number;\n     totalPages: number;\n     onPageChange: (page: number) => void;\n     className?: string;\n   }\n   \n   export default function Pagination({ currentPage, totalPages, onPageChange, className = '' }: PaginationProps) {\n     const renderPageNumbers = () => {\n       const pages = [];\n       const maxVisiblePages = 5;\n       \n       // Logic to show current page and surrounding pages\n       let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));\n       let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);\n       \n       if (endPage - startPage + 1 < maxVisiblePages) {\n         startPage = Math.max(1, endPage - maxVisiblePages + 1);\n       }\n       \n       for (let i = startPage; i <= endPage; i++) {\n         pages.push(\n           <button\n             key={i}\n             onClick={() => onPageChange(i)}\n             className={`px-3 py-1 mx-1 rounded ${\n               currentPage === i\n                 ? 'bg-blue-500 text-white'\n                 : 'bg-white text-gray-700 hover:bg-gray-100'\n             }`}\n           >\n             {i}\n           </button>\n         );\n       }\n       \n       return pages;\n     };\n     \n     return (\n       <div className={`flex items-center justify-center my-4 ${className}`}>\n         <button\n           onClick={() => onPageChange(currentPage - 1)}\n           disabled={currentPage <= 1}\n           className=\"px-3 py-1 mx-1 rounded bg-white text-gray-700 hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed\"\n         >\n           Previous\n         </button>\n         \n         {renderPageNumbers()}\n         \n         <button\n           onClick={() => onPageChange(currentPage + 1)}\n           disabled={currentPage >= totalPages}\n           className=\"px-3 py-1 mx-1 rounded bg-white text-gray-700 hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed\"\n         >\n           Next\n         </button>\n       </div>\n     );\n   }\n   ```\n\n   e. **EmptyState.tsx**:\n   ```tsx\n   interface EmptyStateProps {\n     title: string;\n     message?: string;\n     icon?: React.ReactNode;\n     action?: React.ReactNode;\n     className?: string;\n   }\n   \n   export default function EmptyState({ title, message, icon, action, className = '' }: EmptyStateProps) {\n     return (\n       <div className={`flex flex-col items-center justify-center p-8 text-center ${className}`}>\n         {icon && <div className=\"mb-4 text-gray-400\">{icon}</div>}\n         <h3 className=\"text-lg font-medium text-gray-900\">{title}</h3>\n         {message && <p className=\"mt-1 text-sm text-gray-500\">{message}</p>}\n         {action && <div className=\"mt-6\">{action}</div>}\n       </div>\n     );\n   }\n   ```\n\n   f. **LoadingSpinner.tsx**:\n   ```tsx\n   interface LoadingSpinnerProps {\n     size?: 'small' | 'medium' | 'large';\n     color?: 'primary' | 'secondary' | 'gray';\n     className?: string;\n   }\n   \n   export default function LoadingSpinner({ size = 'medium', color = 'primary', className = '' }: LoadingSpinnerProps) {\n     const sizeClasses = {\n       small: 'h-4 w-4',\n       medium: 'h-8 w-8',\n       large: 'h-12 w-12',\n     };\n     \n     const colorClasses = {\n       primary: 'text-blue-500',\n       secondary: 'text-purple-500',\n       gray: 'text-gray-500',\n     };\n     \n     return (\n       <div className={`flex justify-center items-center ${className}`}>\n         <svg\n           className={`animate-spin ${sizeClasses[size]} ${colorClasses[color]}`}\n           xmlns=\"http://www.w3.org/2000/svg\"\n           fill=\"none\"\n           viewBox=\"0 0 24 24\"\n         >\n           <circle\n             className=\"opacity-25\"\n             cx=\"12\"\n             cy=\"12\"\n             r=\"10\"\n             stroke=\"currentColor\"\n             strokeWidth=\"4\"\n           ></circle>\n           <path\n             className=\"opacity-75\"\n             fill=\"currentColor\"\n             d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n           ></path>\n         </svg>\n       </div>\n     );\n   }\n   ```\n\n   g. **ConfirmDialog.tsx**:\n   ```tsx\n   interface ConfirmDialogProps {\n     isOpen: boolean;\n     onClose: () => void;\n     onConfirm: () => void;\n     title: string;\n     message?: string;\n     confirmText?: string;\n     cancelText?: string;\n     type?: 'danger' | 'warning' | 'info';\n     className?: string;\n   }\n   \n   export default function ConfirmDialog({\n     isOpen,\n     onClose,\n     onConfirm,\n     title,\n     message,\n     confirmText = 'Confirm',\n     cancelText = 'Cancel',\n     type = 'danger',\n     className = '',\n   }: ConfirmDialogProps) {\n     if (!isOpen) return null;\n     \n     const typeStyles = {\n       danger: 'bg-red-600 hover:bg-red-700',\n       warning: 'bg-yellow-600 hover:bg-yellow-700',\n       info: 'bg-blue-600 hover:bg-blue-700',\n     };\n     \n     return (\n       <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n         <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n           <div className=\"fixed inset-0 transition-opacity\" aria-hidden=\"true\">\n             <div className=\"absolute inset-0 bg-gray-500 opacity-75\"></div>\n           </div>\n           \n           <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\n           \n           <div className={`inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full ${className}`}>\n             <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\n               <div className=\"sm:flex sm:items-start\">\n                 <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\n                   <h3 className=\"text-lg leading-6 font-medium text-gray-900\">{title}</h3>\n                   {message && (\n                     <div className=\"mt-2\">\n                       <p className=\"text-sm text-gray-500\">{message}</p>\n                     </div>\n                   )}\n                 </div>\n               </div>\n             </div>\n             <div className=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\n               <button\n                 type=\"button\"\n                 className={`w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 text-base font-medium text-white ${typeStyles[type]} focus:outline-none focus:ring-2 focus:ring-offset-2 sm:ml-3 sm:w-auto sm:text-sm`}\n                 onClick={onConfirm}\n               >\n                 {confirmText}\n               </button>\n               <button\n                 type=\"button\"\n                 className=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\"\n                 onClick={onClose}\n               >\n                 {cancelText}\n               </button>\n             </div>\n           </div>\n         </div>\n       </div>\n     );\n   }\n   ```\n\n2. Ensure all components:\n   - Follow consistent design patterns from BaseLayout\n   - Use Tailwind CSS for styling\n   - Include proper TypeScript interfaces for props\n   - Have appropriate default values for optional props\n   - Are properly exported for use in other components\n\n3. Create an index.ts file in the components/shared directory to export all components:\n   ```tsx\n   export { default as SearchBar } from './SearchBar';\n   export { default as StatusBadge } from './StatusBadge';\n   export { default as TagPills } from './TagPills';\n   export { default as Pagination } from './Pagination';\n   export { default as EmptyState } from './EmptyState';\n   export { default as LoadingSpinner } from './LoadingSpinner';\n   export { default as ConfirmDialog } from './ConfirmDialog';\n   ```\n\n4. Add necessary imports at the top of each component file:\n   ```tsx\n   import { useState, useEffect } from 'react';\n   // Import any icons or other dependencies as needed\n   ```\n\n5. Document each component with JSDoc comments to explain their purpose and usage.",
        "testStrategy": "To verify the correct implementation of the shared UI components:\n\n1. Component File Verification:\n   - Confirm all seven component files exist in the components/shared/ directory:\n     ```bash\n     ls -la components/shared/SearchBar.tsx components/shared/StatusBadge.tsx components/shared/TagPills.tsx components/shared/Pagination.tsx components/shared/EmptyState.tsx components/shared/LoadingSpinner.tsx components/shared/ConfirmDialog.tsx\n     ```\n   - Verify the index.ts file exists and exports all components correctly\n\n2. TypeScript Validation:\n   - Run TypeScript compiler to check for type errors:\n     ```bash\n     npx tsc --noEmit\n     ```\n   - Ensure each component has properly defined TypeScript interfaces for its props\n\n3. Component Testing:\n   - Create a test page that imports and renders each component with various props\n   - For SearchBar: Test the debounce functionality by typing quickly and confirming the search callback is not called on every keystroke\n   - For StatusBadge: Test with different status types to verify correct color coding\n   - For TagPills: Test with both editable and non-editable modes, verify tag removal works\n   - For Pagination: Test with different page counts and verify page navigation works correctly\n   - For EmptyState: Test with and without optional props (icon, message, action)\n   - For LoadingSpinner: Test with different sizes and colors\n   - For ConfirmDialog: Test opening/closing and confirm/cancel actions\n\n4. Responsive Design Testing:\n   - Test all components at different viewport sizes to ensure they adapt correctly\n   - Verify components maintain proper styling and functionality on mobile devices\n\n5. Accessibility Testing:\n   - Check that all components meet basic accessibility requirements\n   - Verify proper contrast ratios for text elements\n   - Ensure interactive elements have appropriate focus states\n   - Test keyboard navigation for interactive components\n\n6. Integration Testing:\n   - Import and use components in at least one page from both the Contacts and Companies modules\n   - Verify components work correctly when integrated with actual application data",
        "status": "pending",
        "dependencies": [
          1
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Create shared UI components for reusable elements",
        "description": "Build a set of reusable UI components in the components/shared/ directory including SearchBar, StatusBadge, TagPills, Pagination, EmptyState, LoadingSpinner, and ConfirmDialog components with TypeScript interfaces and Tailwind CSS styling.",
        "details": "This task involves creating a suite of reusable UI components that will be used across the Contacts and Companies modules:\n\n1. Create the following components in the `components/shared/` directory:\n\n   a. **SearchBar.tsx**:\n   ```tsx\n   interface SearchBarProps {\n     placeholder?: string;\n     initialValue?: string;\n     onSearch: (value: string) => void;\n     className?: string;\n   }\n   \n   export default function SearchBar({ placeholder = 'Search...', initialValue = '', onSearch, className = '' }: SearchBarProps) {\n     // Implementation with search input and icon button\n     // Should handle controlled input with onChange and form submission\n   }\n   ```\n\n   b. **StatusBadge.tsx**:\n   ```tsx\n   interface StatusBadgeProps {\n     status: 'active' | 'inactive' | 'pending' | 'archived' | string;\n     className?: string;\n   }\n   \n   export default function StatusBadge({ status, className = '' }: StatusBadgeProps) {\n     // Implementation with different colors based on status\n     // Should handle custom statuses gracefully\n   }\n   ```\n\n   c. **TagPills.tsx**:\n   ```tsx\n   interface TagPillProps {\n     label: string;\n     onRemove?: () => void;\n     color?: string;\n     className?: string;\n   }\n   \n   export default function TagPill({ label, onRemove, color = 'gray', className = '' }: TagPillProps) {\n     // Implementation with pill styling and optional remove button\n   }\n   \n   interface TagPillsProps {\n     tags: string[];\n     onRemove?: (tag: string) => void;\n     className?: string;\n   }\n   \n   export function TagPills({ tags, onRemove, className = '' }: TagPillsProps) {\n     // Implementation that renders multiple TagPill components\n   }\n   ```\n\n   d. **Pagination.tsx**:\n   ```tsx\n   interface PaginationProps {\n     currentPage: number;\n     totalPages: number;\n     onPageChange: (page: number) => void;\n     className?: string;\n   }\n   \n   export default function Pagination({ currentPage, totalPages, onPageChange, className = '' }: PaginationProps) {\n     // Implementation with previous/next buttons and page numbers\n     // Should handle edge cases (first/last page)\n   }\n   ```\n\n   e. **EmptyState.tsx**:\n   ```tsx\n   interface EmptyStateProps {\n     title: string;\n     description?: string;\n     icon?: React.ReactNode;\n     action?: React.ReactNode;\n     className?: string;\n   }\n   \n   export default function EmptyState({ title, description, icon, action, className = '' }: EmptyStateProps) {\n     // Implementation with centered content, icon, and optional action button\n   }\n   ```\n\n   f. **LoadingSpinner.tsx**:\n   ```tsx\n   interface LoadingSpinnerProps {\n     size?: 'sm' | 'md' | 'lg';\n     className?: string;\n   }\n   \n   export default function LoadingSpinner({ size = 'md', className = '' }: LoadingSpinnerProps) {\n     // Implementation with animated spinner using Tailwind CSS\n   }\n   ```\n\n   g. **ConfirmDialog.tsx**:\n   ```tsx\n   interface ConfirmDialogProps {\n     isOpen: boolean;\n     onClose: () => void;\n     onConfirm: () => void;\n     title: string;\n     message?: string;\n     confirmText?: string;\n     cancelText?: string;\n     variant?: 'danger' | 'warning' | 'info';\n   }\n   \n   export default function ConfirmDialog({ \n     isOpen, \n     onClose, \n     onConfirm, \n     title, \n     message, \n     confirmText = 'Confirm', \n     cancelText = 'Cancel', \n     variant = 'danger' \n   }: ConfirmDialogProps) {\n     // Implementation with modal dialog, backdrop, and action buttons\n     // Should handle keyboard events (Escape to close, Enter to confirm)\n   }\n   ```\n\n2. Ensure all components:\n   - Use TypeScript interfaces for props\n   - Implement responsive design with Tailwind CSS\n   - Follow accessibility best practices (proper ARIA attributes, keyboard navigation)\n   - Include default prop values where appropriate\n   - Handle edge cases gracefully\n\n3. Create an index.ts file to export all components:\n   ```tsx\n   export { default as SearchBar } from './SearchBar';\n   export { default as StatusBadge } from './StatusBadge';\n   export { default as TagPill, TagPills } from './TagPills';\n   export { default as Pagination } from './Pagination';\n   export { default as EmptyState } from './EmptyState';\n   export { default as LoadingSpinner } from './LoadingSpinner';\n   export { default as ConfirmDialog } from './ConfirmDialog';\n   ```\n\n4. Follow existing project patterns for:\n   - Component naming conventions\n   - File structure\n   - Styling approach with Tailwind\n   - Error handling\n   - Prop validation",
        "testStrategy": "To verify the correct implementation of the shared UI components:\n\n1. Component File Verification:\n   - Confirm all seven component files exist in the components/shared/ directory:\n     ```bash\n     ls -la components/shared/SearchBar.tsx components/shared/StatusBadge.tsx components/shared/TagPills.tsx components/shared/Pagination.tsx components/shared/EmptyState.tsx components/shared/LoadingSpinner.tsx components/shared/ConfirmDialog.tsx components/shared/index.ts\n     ```\n   - Verify each file contains the correct TypeScript interfaces and component implementations\n\n2. Component Rendering Tests:\n   - Create a test page that imports and renders each component with various prop combinations\n   - Verify that each component renders without errors\n   - Check that components respond correctly to different prop values\n\n3. Visual Verification:\n   - Verify that all components follow the project's design system and Tailwind styling\n   - Check responsive behavior by testing at different viewport sizes\n   - Ensure consistent styling across components\n\n4. Functionality Testing:\n   - Test SearchBar by entering text and triggering the search function\n   - Test StatusBadge with different status values\n   - Test TagPills with and without the remove functionality\n   - Test Pagination by changing pages and handling edge cases\n   - Test EmptyState with different content configurations\n   - Test LoadingSpinner at different sizes\n   - Test ConfirmDialog by opening, canceling, and confirming\n\n5. Accessibility Testing:\n   - Verify keyboard navigation works for interactive components\n   - Check that proper ARIA attributes are applied\n   - Test with a screen reader to ensure components are accessible\n\n6. Integration Testing:\n   - Import components into a test page that simulates their usage in the Contacts and Companies modules\n   - Verify they work correctly in the context of the application\n\n7. Code Review:\n   - Ensure TypeScript types are correctly defined and used\n   - Verify Tailwind classes follow project conventions\n   - Check that components handle edge cases and error states appropriately",
        "status": "pending",
        "dependencies": [
          1
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Build Contacts List View Component",
        "description": "Create a ContactsList.tsx component that displays contact data in a table format with pagination, search, filtering, and sorting capabilities, using localStorage for mock data storage.",
        "details": "This task involves building a comprehensive Contacts List View component with multiple interactive features:\n\n1. Create `components/contacts/ContactsList.tsx` with the following structure:\n   ```tsx\n   import { useState, useEffect } from 'react';\n   import { SearchBar, Pagination, LoadingSpinner, EmptyState } from '../shared';\n   \n   interface Contact {\n     id: string;\n     firstName: string;\n     lastName: string;\n     email: string;\n     phone: string;\n     company?: string;\n     status: 'active' | 'inactive' | 'lead';\n     tags?: string[];\n     lastContactedAt?: Date;\n     createdAt: Date;\n   }\n   \n   interface ContactsListProps {\n     initialContacts?: Contact[];\n     isLoading?: boolean;\n     error?: string;\n   }\n   \n   export default function ContactsList({ \n     initialContacts = [], \n     isLoading = false,\n     error = ''\n   }: ContactsListProps) {\n     // State management\n     const [contacts, setContacts] = useState<Contact[]>([]);\n     const [filteredContacts, setFilteredContacts] = useState<Contact[]>([]);\n     const [searchTerm, setSearchTerm] = useState('');\n     const [currentPage, setCurrentPage] = useState(1);\n     const [itemsPerPage] = useState(10);\n     const [sortField, setSortField] = useState<keyof Contact>('lastName');\n     const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n     const [statusFilter, setStatusFilter] = useState<string>('all');\n     \n     // Load mock data from localStorage or initialize with sample data\n     useEffect(() => {\n       const storedContacts = localStorage.getItem('contacts');\n       if (storedContacts) {\n         setContacts(JSON.parse(storedContacts));\n       } else if (initialContacts.length > 0) {\n         setContacts(initialContacts);\n       } else {\n         // Generate mock data if none exists\n         const mockContacts = generateMockContacts(25);\n         setContacts(mockContacts);\n         localStorage.setItem('contacts', JSON.stringify(mockContacts));\n       }\n     }, [initialContacts]);\n     \n     // Filter, sort, and paginate contacts\n     useEffect(() => {\n       let result = [...contacts];\n       \n       // Apply search filter\n       if (searchTerm) {\n         result = result.filter(contact => \n           contact.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n           contact.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n           contact.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n           contact.company?.toLowerCase().includes(searchTerm.toLowerCase())\n         );\n       }\n       \n       // Apply status filter\n       if (statusFilter !== 'all') {\n         result = result.filter(contact => contact.status === statusFilter);\n       }\n       \n       // Apply sorting\n       result.sort((a, b) => {\n         const aValue = a[sortField];\n         const bValue = b[sortField];\n         \n         if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n         if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n         return 0;\n       });\n       \n       setFilteredContacts(result);\n     }, [contacts, searchTerm, statusFilter, sortField, sortDirection]);\n     \n     // Calculate pagination\n     const indexOfLastItem = currentPage * itemsPerPage;\n     const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n     const currentContacts = filteredContacts.slice(indexOfFirstItem, indexOfLastItem);\n     const totalPages = Math.ceil(filteredContacts.length / itemsPerPage);\n     \n     // Handle sort toggle\n     const handleSort = (field: keyof Contact) => {\n       if (field === sortField) {\n         setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n       } else {\n         setSortField(field);\n         setSortDirection('asc');\n       }\n     };\n     \n     // Generate mock data function\n     function generateMockContacts(count: number): Contact[] {\n       // Implementation of mock data generation\n       // ...\n     }\n     \n     if (isLoading) return <LoadingSpinner />;\n     if (error) return <div className=\"text-red-500\">Error: {error}</div>;\n     if (contacts.length === 0) return <EmptyState message=\"No contacts found\" />;\n     \n     return (\n       <div className=\"w-full\">\n         <div className=\"flex justify-between items-center mb-4\">\n           <SearchBar \n             placeholder=\"Search contacts...\" \n             onSearch={value => setSearchTerm(value)}\n           />\n           <div className=\"flex space-x-2\">\n             <select\n               className=\"border rounded px-2 py-1\"\n               value={statusFilter}\n               onChange={e => setStatusFilter(e.target.value)}\n             >\n               <option value=\"all\">All Statuses</option>\n               <option value=\"active\">Active</option>\n               <option value=\"inactive\">Inactive</option>\n               <option value=\"lead\">Lead</option>\n             </select>\n           </div>\n         </div>\n         \n         <div className=\"overflow-x-auto\">\n           <table className=\"min-w-full bg-white border border-gray-200\">\n             <thead>\n               <tr className=\"bg-gray-100\">\n                 <th className=\"px-4 py-2 cursor-pointer\" onClick={() => handleSort('lastName')}>\n                   Name {sortField === 'lastName' && (sortDirection === 'asc' ? 'â†‘' : 'â†“')}\n                 </th>\n                 <th className=\"px-4 py-2 cursor-pointer\" onClick={() => handleSort('email')}>\n                   Email {sortField === 'email' && (sortDirection === 'asc' ? 'â†‘' : 'â†“')}\n                 </th>\n                 <th className=\"px-4 py-2 cursor-pointer\" onClick={() => handleSort('company')}>\n                   Company {sortField === 'company' && (sortDirection === 'asc' ? 'â†‘' : 'â†“')}\n                 </th>\n                 <th className=\"px-4 py-2 cursor-pointer\" onClick={() => handleSort('status')}>\n                   Status {sortField === 'status' && (sortDirection === 'asc' ? 'â†‘' : 'â†“')}\n                 </th>\n                 <th className=\"px-4 py-2 cursor-pointer\" onClick={() => handleSort('lastContactedAt')}>\n                   Last Contacted {sortField === 'lastContactedAt' && (sortDirection === 'asc' ? 'â†‘' : 'â†“')}\n                 </th>\n                 <th className=\"px-4 py-2\">Actions</th>\n               </tr>\n             </thead>\n             <tbody>\n               {currentContacts.map(contact => (\n                 <tr key={contact.id} className=\"border-t hover:bg-gray-50\">\n                   <td className=\"px-4 py-2\">{contact.firstName} {contact.lastName}</td>\n                   <td className=\"px-4 py-2\">{contact.email}</td>\n                   <td className=\"px-4 py-2\">{contact.company || '-'}</td>\n                   <td className=\"px-4 py-2\">\n                     <span className={`px-2 py-1 rounded text-xs ${\n                       contact.status === 'active' ? 'bg-green-100 text-green-800' :\n                       contact.status === 'inactive' ? 'bg-gray-100 text-gray-800' :\n                       'bg-blue-100 text-blue-800'\n                     }`}>\n                       {contact.status}\n                     </span>\n                   </td>\n                   <td className=\"px-4 py-2\">\n                     {contact.lastContactedAt \n                       ? new Date(contact.lastContactedAt).toLocaleDateString() \n                       : 'Never'}\n                   </td>\n                   <td className=\"px-4 py-2\">\n                     <button className=\"text-blue-500 hover:text-blue-700 mr-2\">\n                       Edit\n                     </button>\n                     <button className=\"text-red-500 hover:text-red-700\">\n                       Delete\n                     </button>\n                   </td>\n                 </tr>\n               ))}\n             </tbody>\n           </table>\n         </div>\n         \n         {totalPages > 1 && (\n           <div className=\"mt-4\">\n             <Pagination \n               currentPage={currentPage}\n               totalPages={totalPages}\n               onPageChange={setCurrentPage}\n             />\n           </div>\n         )}\n       </div>\n     );\n   }\n   ```\n\n2. Create a helper function to generate mock contact data:\n   ```tsx\n   function generateMockContacts(count: number): Contact[] {\n     const statuses: Array<'active' | 'inactive' | 'lead'> = ['active', 'inactive', 'lead'];\n     const companies = ['Acme Inc', 'TechCorp', 'Global Solutions', 'Innovate LLC', 'Summit Partners'];\n     const tags = ['client', 'prospect', 'partner', 'vendor', 'influencer', 'investor'];\n     \n     return Array.from({ length: count }, (_, i) => {\n       const firstName = `FirstName${i + 1}`;\n       const lastName = `LastName${i + 1}`;\n       \n       return {\n         id: `contact-${i + 1}`,\n         firstName,\n         lastName,\n         email: `${firstName.toLowerCase()}.${lastName.toLowerCase()}@example.com`,\n         phone: `555-${String(100 + i).padStart(3, '0')}-${String(1000 + i).padStart(4, '0')}`,\n         company: Math.random() > 0.3 ? companies[Math.floor(Math.random() * companies.length)] : undefined,\n         status: statuses[Math.floor(Math.random() * statuses.length)],\n         tags: Math.random() > 0.5 \n           ? Array.from(\n               { length: Math.floor(Math.random() * 3) + 1 }, \n               () => tags[Math.floor(Math.random() * tags.length)]\n             )\n           : undefined,\n         lastContactedAt: Math.random() > 0.3 \n           ? new Date(Date.now() - Math.floor(Math.random() * 90) * 24 * 60 * 60 * 1000) \n           : undefined,\n         createdAt: new Date(Date.now() - Math.floor(Math.random() * 365) * 24 * 60 * 60 * 1000)\n       };\n     });\n   }\n   ```\n\n3. Create a simple page component to display the contacts list at `app/contacts/page.tsx`:\n   ```tsx\n   import ContactsList from '@/components/contacts/ContactsList';\n   \n   export default function ContactsPage() {\n     return (\n       <div className=\"container mx-auto px-4 py-8\">\n         <h1 className=\"text-2xl font-bold mb-6\">Contacts</h1>\n         <ContactsList />\n       </div>\n     );\n   }\n   ```\n\n4. Implement localStorage persistence:\n   - The component should check localStorage for existing contacts data on mount\n   - If no data exists, generate mock data and store it in localStorage\n   - Ensure proper data serialization/deserialization for dates\n\n5. Implement all interactive features:\n   - Searching: Filter contacts by name, email, or company\n   - Filtering: Allow filtering by contact status\n   - Sorting: Enable sorting by clicking column headers\n   - Pagination: Show a limited number of contacts per page with navigation\n\n6. Ensure the component is responsive and works well on mobile devices by:\n   - Using responsive table design or card-based layout on small screens\n   - Adjusting pagination controls for touch interfaces\n   - Ensuring filter controls are accessible on mobile",
        "testStrategy": "To verify the correct implementation of the Contacts List View component:\n\n1. Component Structure Verification:\n   - Confirm the ContactsList.tsx file exists in the components/contacts/ directory:\n     ```bash\n     ls -la components/contacts/ContactsList.tsx\n     ```\n   - Verify the page component exists:\n     ```bash\n     ls -la app/contacts/page.tsx\n     ```\n\n2. Functionality Testing:\n   - Navigate to the /contacts route in the application\n   - Verify that mock data is displayed in a table format\n   - Test the search functionality:\n     * Enter a search term in the search bar\n     * Confirm that results are filtered correctly based on name, email, or company\n     * Clear the search and verify all contacts are shown again\n   - Test the status filter:\n     * Select each status option from the dropdown (All, Active, Inactive, Lead)\n     * Verify that only contacts with the selected status are displayed\n   - Test the sorting functionality:\n     * Click on each column header\n     * Verify that the list sorts correctly in ascending order\n     * Click again on the same header and verify it sorts in descending order\n   - Test pagination:\n     * Verify that only the specified number of items per page are shown\n     * Navigate through pages using the pagination controls\n     * Confirm that the correct set of contacts is displayed on each page\n\n3. Data Persistence Testing:\n   - Open the application in a new browser tab\n   - Navigate to the contacts page\n   - Verify that the same contact data is displayed (loaded from localStorage)\n   - Open browser developer tools and check localStorage:\n     ```javascript\n     // In browser console\n     const storedContacts = localStorage.getItem('contacts');\n     console.log(JSON.parse(storedContacts));\n     ```\n   - Confirm that the data structure matches the Contact interface\n\n4. Responsive Design Testing:\n   - Test the component on various screen sizes (desktop, tablet, mobile)\n   - Verify that the table/list remains readable on small screens\n   - Confirm that all interactive elements (search, filters, pagination) are usable on touch devices\n\n5. Integration Testing:\n   - Verify that the component correctly uses the shared UI components:\n     * SearchBar for filtering\n     * Pagination for navigating between pages\n     * LoadingSpinner for loading states\n     * EmptyState for when no contacts are found\n\n6. Edge Case Testing:\n   - Test with empty data (clear localStorage and refresh)\n   - Test with a very large number of contacts to verify performance\n   - Test with long text values to ensure the UI handles them gracefully\n   - Test search with special characters and case variations",
        "status": "pending",
        "dependencies": [
          1,
          3
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Implement Contacts List View Page",
        "description": "Create a page component that integrates the ContactsList component with the BaseLayout, implements routing, and handles data fetching from localStorage to display contacts in a table layout with pagination, search, and filtering.",
        "details": "This task involves implementing the Contacts List View page that will serve as the main entry point for the Contacts module:\n\n1. Create a new page component at `app/contacts/page.tsx`:\n   ```tsx\n   import { Suspense } from 'react';\n   import { BaseLayout } from '@/components/layout';\n   import { ContactsList } from '@/components/contacts';\n   import { LoadingSpinner, EmptyState } from '@/components/shared';\n   \n   export default function ContactsPage() {\n     return (\n       <BaseLayout title=\"Contacts\" description=\"Manage your contacts\">\n         <div className=\"px-4 sm:px-6 lg:px-8 py-6\">\n           <div className=\"sm:flex sm:items-center mb-6\">\n             <div className=\"sm:flex-auto\">\n               <h1 className=\"text-xl font-semibold text-gray-900\">Contacts</h1>\n               <p className=\"mt-2 text-sm text-gray-700\">\n                 A list of all contacts in your account including their name, email, phone, and status.\n               </p>\n             </div>\n             <div className=\"mt-4 sm:mt-0 sm:ml-16 sm:flex-none\">\n               <button\n                 type=\"button\"\n                 className=\"inline-flex items-center justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:w-auto\"\n               >\n                 Add contact\n               </button>\n             </div>\n           </div>\n           \n           <Suspense fallback={<LoadingSpinner />}>\n             <ContactsList />\n           </Suspense>\n         </div>\n       </BaseLayout>\n     );\n   }\n   ```\n\n2. Implement a mock data service for contacts in `lib/services/contactsService.ts`:\n   ```tsx\n   import { Contact } from '@/lib/types';\n   \n   // Generate mock data if none exists\n   const initializeContactsData = (): Contact[] => {\n     const existingData = localStorage.getItem('contacts');\n     if (existingData) {\n       return JSON.parse(existingData);\n     }\n     \n     // Generate 50 mock contacts\n     const mockContacts: Contact[] = Array.from({ length: 50 }, (_, i) => ({\n       id: `contact-${i + 1}`,\n       firstName: `FirstName${i + 1}`,\n       lastName: `LastName${i + 1}`,\n       email: `contact${i + 1}@example.com`,\n       phone: `+1 (555) ${100 + i}-${1000 + i}`,\n       company: i % 3 === 0 ? `Company ${Math.floor(i / 3)}` : undefined,\n       status: ['active', 'inactive', 'lead'][i % 3],\n       tags: i % 2 === 0 ? ['customer'] : ['prospect'],\n       createdAt: new Date(Date.now() - (i * 86400000)).toISOString(),\n     }));\n     \n     localStorage.setItem('contacts', JSON.stringify(mockContacts));\n     return mockContacts;\n   };\n   \n   export const getContacts = async (\n     page = 1,\n     limit = 10,\n     search = '',\n     filters = {}\n   ): Promise<{ data: Contact[], total: number }> => {\n     // Simulate network delay\n     await new Promise(resolve => setTimeout(resolve, 500));\n     \n     let contacts = initializeContactsData();\n     \n     // Apply search\n     if (search) {\n       const searchLower = search.toLowerCase();\n       contacts = contacts.filter(contact => \n         contact.firstName.toLowerCase().includes(searchLower) ||\n         contact.lastName.toLowerCase().includes(searchLower) ||\n         contact.email.toLowerCase().includes(searchLower) ||\n         contact.phone.includes(search)\n       );\n     }\n     \n     // Apply filters\n     if (filters) {\n       Object.entries(filters).forEach(([key, value]) => {\n         if (value) {\n           contacts = contacts.filter(contact => contact[key] === value);\n         }\n       });\n     }\n     \n     // Calculate pagination\n     const total = contacts.length;\n     const startIndex = (page - 1) * limit;\n     const paginatedContacts = contacts.slice(startIndex, startIndex + limit);\n     \n     return { data: paginatedContacts, total };\n   };\n   ```\n\n3. Update the ContactsList component to use the contactsService:\n   ```tsx\n   // In ContactsList.tsx, add:\n   import { getContacts } from '@/lib/services/contactsService';\n   \n   // Then in the component:\n   const [contacts, setContacts] = useState<Contact[]>([]);\n   const [loading, setLoading] = useState(true);\n   const [total, setTotal] = useState(0);\n   const [page, setPage] = useState(1);\n   const [search, setSearch] = useState('');\n   const [filters, setFilters] = useState({});\n   \n   useEffect(() => {\n     const fetchContacts = async () => {\n       setLoading(true);\n       try {\n         const result = await getContacts(page, 10, search, filters);\n         setContacts(result.data);\n         setTotal(result.total);\n       } catch (error) {\n         console.error('Error fetching contacts:', error);\n       } finally {\n         setLoading(false);\n       }\n     };\n     \n     fetchContacts();\n   }, [page, search, filters]);\n   ```\n\n4. Ensure the routing is properly set up in `app/contacts/layout.tsx` (if needed):\n   ```tsx\n   export default function ContactsLayout({\n     children,\n   }: {\n     children: React.ReactNode;\n   }) {\n     return children;\n   }\n   ```\n\n5. Add a loading state component at `app/contacts/loading.tsx`:\n   ```tsx\n   import { LoadingSpinner } from '@/components/shared';\n   import { BaseLayout } from '@/components/layout';\n   \n   export default function Loading() {\n     return (\n       <BaseLayout title=\"Contacts\" description=\"Manage your contacts\">\n         <div className=\"flex items-center justify-center h-64\">\n           <LoadingSpinner size=\"large\" />\n         </div>\n       </BaseLayout>\n     );\n   }\n   ```",
        "testStrategy": "To verify the correct implementation of the Contacts List View page:\n\n1. Page Component Verification:\n   - Confirm the page component exists in the correct location:\n     ```bash\n     ls -la app/contacts/page.tsx\n     ```\n   - Verify the loading component exists:\n     ```bash\n     ls -la app/contacts/loading.tsx\n     ```\n\n2. Functional Testing:\n   - Navigate to the `/contacts` route in the browser\n   - Verify the page loads without errors\n   - Confirm the page title and description are displayed correctly\n   - Check that the \"Add contact\" button is visible\n\n3. Data Loading and Display:\n   - Verify that mock contact data is displayed in the table\n   - Confirm that pagination controls appear and show the correct total number of contacts\n   - Check that the loading spinner appears briefly when the page first loads\n\n4. Search and Filter Functionality:\n   - Test the search functionality by entering a contact name or email\n   - Verify that the results update accordingly\n   - Test filters (if implemented) to ensure they correctly filter the data\n   - Confirm that combining search with filters works as expected\n\n5. Pagination Testing:\n   - Navigate through different pages using the pagination controls\n   - Verify that the correct set of contacts is displayed for each page\n   - Check that the current page indicator updates correctly\n\n6. LocalStorage Integration:\n   - Open browser developer tools and check the localStorage:\n     ```javascript\n     JSON.parse(localStorage.getItem('contacts'))\n     ```\n   - Verify that mock data is properly stored in localStorage\n   - Try clearing localStorage and refreshing to confirm data is regenerated\n\n7. Responsive Design Testing:\n   - Test the page on different viewport sizes (mobile, tablet, desktop)\n   - Verify that the layout adjusts appropriately\n   - Confirm that all controls remain accessible and usable on smaller screens\n\n8. Integration Testing:\n   - Verify that clicking on the Contacts tab in the navigation correctly routes to this page\n   - Check that the BaseLayout is properly integrated with the page content",
        "status": "pending",
        "dependencies": [
          2,
          3,
          5
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Implement Contact Detail Page",
        "description": "Create a page component that displays detailed information for a single contact, including full profile information, company link, activity history, notes section, and action buttons for editing and deleting the contact.",
        "details": "This task involves implementing the Contact Detail page that will display comprehensive information about a single contact:\n\n1. Create a new page component at `app/contacts/[id]/page.tsx`:\n   ```tsx\n   import { Suspense } from 'react';\n   import { BaseLayout } from '@/components/layout';\n   import { ContactDetail } from '@/components/contacts';\n   import { LoadingSpinner, EmptyState } from '@/components/shared';\n   \n   export default function ContactDetailPage({ params }: { params: { id: string } }) {\n     return (\n       <BaseLayout title=\"Contact Details\" backLink=\"/contacts\">\n         <Suspense fallback={<LoadingSpinner />}>\n           <ContactDetail contactId={params.id} />\n         </Suspense>\n       </BaseLayout>\n     );\n   }\n   ```\n\n2. Create a new component at `components/contacts/ContactDetail.tsx`:\n   ```tsx\n   import { useState, useEffect } from 'react';\n   import { useRouter } from 'next/navigation';\n   import { StatusBadge, TagPills, ConfirmDialog } from '@/components/shared';\n   \n   interface ContactDetailProps {\n     contactId: string;\n   }\n   \n   export function ContactDetail({ contactId }: ContactDetailProps) {\n     const router = useRouter();\n     const [contact, setContact] = useState<Contact | null>(null);\n     const [loading, setLoading] = useState(true);\n     const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n     \n     useEffect(() => {\n       // Fetch contact data from localStorage\n       const fetchContact = () => {\n         setLoading(true);\n         try {\n           const storedContacts = JSON.parse(localStorage.getItem('contacts') || '[]');\n           const foundContact = storedContacts.find((c: Contact) => c.id === contactId);\n           setContact(foundContact || null);\n         } catch (error) {\n           console.error('Error fetching contact:', error);\n         } finally {\n           setLoading(false);\n         }\n       };\n       \n       fetchContact();\n     }, [contactId]);\n     \n     const handleDelete = () => {\n       try {\n         const storedContacts = JSON.parse(localStorage.getItem('contacts') || '[]');\n         const updatedContacts = storedContacts.filter((c: Contact) => c.id !== contactId);\n         localStorage.setItem('contacts', JSON.stringify(updatedContacts));\n         router.push('/contacts');\n       } catch (error) {\n         console.error('Error deleting contact:', error);\n       }\n     };\n     \n     if (loading) return <LoadingSpinner />;\n     if (!contact) return <EmptyState message=\"Contact not found\" />;\n     \n     return (\n       <div className=\"bg-white shadow rounded-lg\">\n         {/* Header section with actions */}\n         <div className=\"p-6 border-b border-gray-200 flex justify-between items-center\">\n           <h1 className=\"text-2xl font-bold text-gray-900\">\n             {contact.firstName} {contact.lastName}\n           </h1>\n           <div className=\"flex space-x-2\">\n             <button \n               onClick={() => router.push(`/contacts/${contactId}/edit`)}\n               className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n             >\n               Edit\n             </button>\n             <button \n               onClick={() => setShowDeleteDialog(true)}\n               className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700\"\n             >\n               Delete\n             </button>\n           </div>\n         </div>\n         \n         {/* Contact information */}\n         <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 p-6\">\n           {/* Left column - Basic info */}\n           <div className=\"col-span-2 space-y-6\">\n             <div className=\"grid grid-cols-2 gap-4\">\n               <div>\n                 <h3 className=\"text-sm font-medium text-gray-500\">Email</h3>\n                 <p className=\"mt-1 text-sm text-gray-900\">{contact.email}</p>\n               </div>\n               <div>\n                 <h3 className=\"text-sm font-medium text-gray-500\">Phone</h3>\n                 <p className=\"mt-1 text-sm text-gray-900\">{contact.phone}</p>\n               </div>\n               {contact.company && (\n                 <div>\n                   <h3 className=\"text-sm font-medium text-gray-500\">Company</h3>\n                   <p className=\"mt-1 text-sm text-blue-600 hover:underline cursor-pointer\">\n                     <a href={`/companies/${contact.companyId}`}>{contact.company}</a>\n                   </p>\n                 </div>\n               )}\n               <div>\n                 <h3 className=\"text-sm font-medium text-gray-500\">Status</h3>\n                 <div className=\"mt-1\">\n                   <StatusBadge status={contact.status} />\n                 </div>\n               </div>\n             </div>\n             \n             {/* Tags section */}\n             {contact.tags && contact.tags.length > 0 && (\n               <div>\n                 <h3 className=\"text-sm font-medium text-gray-500 mb-2\">Tags</h3>\n                 <TagPills tags={contact.tags} />\n               </div>\n             )}\n             \n             {/* Notes section */}\n             <div>\n               <h3 className=\"text-sm font-medium text-gray-500 mb-2\">Notes</h3>\n               <div className=\"bg-gray-50 p-4 rounded-md\">\n                 {contact.notes ? (\n                   <p className=\"text-sm text-gray-700 whitespace-pre-wrap\">{contact.notes}</p>\n                 ) : (\n                   <p className=\"text-sm text-gray-500 italic\">No notes available</p>\n                 )}\n               </div>\n             </div>\n           </div>\n           \n           {/* Right column - Activity */}\n           <div className=\"col-span-1\">\n             <h3 className=\"text-sm font-medium text-gray-500 mb-2\">Recent Activity</h3>\n             <div className=\"bg-gray-50 p-4 rounded-md h-64 flex items-center justify-center\">\n               <p className=\"text-sm text-gray-500 italic\">Activity timeline coming soon</p>\n             </div>\n           </div>\n         </div>\n         \n         {/* Delete confirmation dialog */}\n         <ConfirmDialog\n           isOpen={showDeleteDialog}\n           title=\"Delete Contact\"\n           message={`Are you sure you want to delete ${contact.firstName} ${contact.lastName}? This action cannot be undone.`}\n           confirmLabel=\"Delete\"\n           cancelLabel=\"Cancel\"\n           onConfirm={handleDelete}\n           onCancel={() => setShowDeleteDialog(false)}\n         />\n       </div>\n     );\n   }\n   ```\n\n3. Export the ContactDetail component from the contacts index file:\n   ```tsx\n   // components/contacts/index.ts\n   export * from './ContactsList';\n   export * from './ContactDetail';\n   ```\n\n4. Update the Contact interface in `lib/types/contacts.ts` if needed to ensure it includes all fields required for the detail view:\n   ```tsx\n   export interface Contact {\n     id: string;\n     firstName: string;\n     lastName: string;\n     email: string;\n     phone: string;\n     company?: string;\n     companyId?: string;\n     status: 'active' | 'inactive' | 'lead';\n     tags?: string[];\n     notes?: string;\n     createdAt: string;\n     updatedAt: string;\n   }\n   ```\n\n5. Ensure the mock data in localStorage includes all the necessary fields for a comprehensive contact detail view.",
        "testStrategy": "To verify the correct implementation of the Contact Detail page:\n\n1. Page Component Verification:\n   - Confirm the page component exists in the correct location:\n     ```bash\n     ls -la app/contacts/[id]/page.tsx\n     ```\n   - Verify the ContactDetail component exists:\n     ```bash\n     ls -la components/contacts/ContactDetail.tsx\n     ```\n   - Check that the ContactDetail component is properly exported from the index file:\n     ```bash\n     grep -n \"export.*ContactDetail\" components/contacts/index.ts\n     ```\n\n2. Functionality Testing:\n   - Add mock contact data to localStorage if not already present:\n     ```javascript\n     localStorage.setItem('contacts', JSON.stringify([\n       {\n         id: '1',\n         firstName: 'John',\n         lastName: 'Doe',\n         email: 'john.doe@example.com',\n         phone: '(555) 123-4567',\n         company: 'Acme Inc',\n         companyId: '1',\n         status: 'active',\n         tags: ['client', 'tech'],\n         notes: 'Met at conference in March. Interested in our enterprise solution.',\n         createdAt: '2023-01-15T12:00:00Z',\n         updatedAt: '2023-03-20T15:30:00Z'\n       }\n     ]));\n     ```\n   - Navigate to the contact detail page by visiting `/contacts/1` in the browser\n   - Verify that all contact information is displayed correctly:\n     - Name in the header\n     - Email, phone, and other basic information\n     - Company name with a clickable link\n     - Status badge with correct styling\n     - Tags displayed as pills\n     - Notes section with formatted text\n     - Placeholder for activity timeline\n\n3. UI/UX Testing:\n   - Test responsive layout by resizing the browser window:\n     - Verify the layout adjusts appropriately for mobile, tablet, and desktop views\n   - Verify that the Edit button navigates to the correct URL (`/contacts/1/edit`)\n   - Test the Delete functionality:\n     - Click the Delete button\n     - Verify the confirmation dialog appears with the correct contact name\n     - Cancel the deletion and verify the dialog closes without changes\n     - Confirm the deletion and verify:\n       - The contact is removed from localStorage\n       - The user is redirected to the contacts list page\n\n4. Error Handling Testing:\n   - Test with an invalid contact ID (e.g., `/contacts/999`)\n   - Verify that an appropriate \"Contact not found\" message is displayed\n   - Verify that the loading state works correctly by artificially delaying data loading\n\n5. Integration Testing:\n   - Verify that the BaseLayout is properly applied with:\n     - Correct page title\n     - Back button that navigates to the contacts list\n     - Consistent styling with other pages",
        "status": "pending",
        "dependencies": [
          2,
          3,
          6
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Build ContactForm Component with React Hook Form and Zod Validation",
        "description": "Create a reusable ContactForm component that handles both create and edit flows, implementing React Hook Form with Zod validation, including a tags multi-select and company autocomplete field.",
        "details": "This task involves building a comprehensive ContactForm component that will be used for both creating and editing contacts:\n\n1. Create `components/contacts/ContactForm.tsx` with the following structure:\n   ```tsx\n   import { useState, useEffect } from 'react';\n   import { useForm, Controller } from 'react-hook-form';\n   import { zodResolver } from '@hookform/resolvers/zod';\n   import { z } from 'zod';\n   import { TagPills } from '../shared';\n   \n   // Define Zod validation schema\n   const contactSchema = z.object({\n     firstName: z.string().min(1, 'First name is required'),\n     lastName: z.string().min(1, 'Last name is required'),\n     email: z.string().email('Invalid email format'),\n     phone: z.string().optional(),\n     company: z.object({\n       id: z.string(),\n       name: z.string()\n     }).optional(),\n     status: z.enum(['active', 'inactive', 'lead']),\n     tags: z.array(z.string()).optional(),\n     notes: z.string().optional()\n   });\n   \n   type ContactFormValues = z.infer<typeof contactSchema>;\n   \n   interface ContactFormProps {\n     initialData?: Partial<ContactFormValues>;\n     onSubmit: (data: ContactFormValues) => void;\n     onCancel: () => void;\n     isSubmitting?: boolean;\n   }\n   \n   export default function ContactForm({ \n     initialData = {}, \n     onSubmit, \n     onCancel, \n     isSubmitting = false \n   }: ContactFormProps) {\n     // Set up React Hook Form with Zod validation\n     const { \n       register, \n       handleSubmit, \n       control, \n       formState: { errors }, \n       reset \n     } = useForm<ContactFormValues>({\n       resolver: zodResolver(contactSchema),\n       defaultValues: initialData\n     });\n     \n     // State for company autocomplete\n     const [companySearchTerm, setCompanySearchTerm] = useState('');\n     const [companyResults, setCompanyResults] = useState([]);\n     const [availableTags, setAvailableTags] = useState([]);\n     \n     // Load available tags on component mount\n     useEffect(() => {\n       // In a real app, this would be an API call\n       const mockTags = ['client', 'prospect', 'partner', 'vendor', 'internal'];\n       setAvailableTags(mockTags);\n     }, []);\n     \n     // Handle company search\n     useEffect(() => {\n       if (companySearchTerm.length > 2) {\n         // In a real app, this would be an API call with debounce\n         const mockCompanySearch = [\n           { id: '1', name: 'Acme Inc' },\n           { id: '2', name: 'Globex Corporation' },\n           { id: '3', name: 'Initech' }\n         ].filter(company => \n           company.name.toLowerCase().includes(companySearchTerm.toLowerCase())\n         );\n         setCompanyResults(mockCompanySearch);\n       } else {\n         setCompanyResults([]);\n       }\n     }, [companySearchTerm]);\n     \n     // Reset form when initialData changes\n     useEffect(() => {\n       reset(initialData);\n     }, [initialData, reset]);\n     \n     return (\n       <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n         <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n           {/* First Name Field */}\n           <div>\n             <label htmlFor=\"firstName\" className=\"block text-sm font-medium text-gray-700\">\n               First Name *\n             </label>\n             <input\n               id=\"firstName\"\n               type=\"text\"\n               {...register('firstName')}\n               className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500\"\n             />\n             {errors.firstName && (\n               <p className=\"mt-1 text-sm text-red-600\">{errors.firstName.message}</p>\n             )}\n           </div>\n           \n           {/* Last Name Field */}\n           <div>\n             <label htmlFor=\"lastName\" className=\"block text-sm font-medium text-gray-700\">\n               Last Name *\n             </label>\n             <input\n               id=\"lastName\"\n               type=\"text\"\n               {...register('lastName')}\n               className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500\"\n             />\n             {errors.lastName && (\n               <p className=\"mt-1 text-sm text-red-600\">{errors.lastName.message}</p>\n             )}\n           </div>\n           \n           {/* Email Field */}\n           <div>\n             <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\n               Email *\n             </label>\n             <input\n               id=\"email\"\n               type=\"email\"\n               {...register('email')}\n               className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500\"\n             />\n             {errors.email && (\n               <p className=\"mt-1 text-sm text-red-600\">{errors.email.message}</p>\n             )}\n           </div>\n           \n           {/* Phone Field */}\n           <div>\n             <label htmlFor=\"phone\" className=\"block text-sm font-medium text-gray-700\">\n               Phone\n             </label>\n             <input\n               id=\"phone\"\n               type=\"tel\"\n               {...register('phone')}\n               className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500\"\n             />\n             {errors.phone && (\n               <p className=\"mt-1 text-sm text-red-600\">{errors.phone.message}</p>\n             )}\n           </div>\n           \n           {/* Company Autocomplete */}\n           <div>\n             <label htmlFor=\"company\" className=\"block text-sm font-medium text-gray-700\">\n               Company\n             </label>\n             <Controller\n               name=\"company\"\n               control={control}\n               render={({ field }) => (\n                 <div className=\"relative\">\n                   <input\n                     type=\"text\"\n                     value={companySearchTerm}\n                     onChange={(e) => setCompanySearchTerm(e.target.value)}\n                     placeholder=\"Search for company...\"\n                     className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500\"\n                   />\n                   {companyResults.length > 0 && (\n                     <ul className=\"absolute z-10 mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm\">\n                       {companyResults.map((company) => (\n                         <li\n                           key={company.id}\n                           className=\"relative cursor-default select-none py-2 pl-3 pr-9 hover:bg-indigo-100\"\n                           onClick={() => {\n                             field.onChange(company);\n                             setCompanySearchTerm(company.name);\n                             setCompanyResults([]);\n                           }}\n                         >\n                           {company.name}\n                         </li>\n                       ))}\n                     </ul>\n                   )}\n                   {field.value && (\n                     <div className=\"mt-2 flex items-center\">\n                       <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                         {field.value.name}\n                         <button\n                           type=\"button\"\n                           className=\"ml-1 inline-flex text-blue-400 hover:text-blue-600\"\n                           onClick={() => {\n                             field.onChange(undefined);\n                             setCompanySearchTerm('');\n                           }}\n                         >\n                           &times;\n                         </button>\n                       </span>\n                     </div>\n                   )}\n                 </div>\n               )}\n             />\n             {errors.company && (\n               <p className=\"mt-1 text-sm text-red-600\">{errors.company.message}</p>\n             )}\n           </div>\n           \n           {/* Status Field */}\n           <div>\n             <label htmlFor=\"status\" className=\"block text-sm font-medium text-gray-700\">\n               Status *\n             </label>\n             <select\n               id=\"status\"\n               {...register('status')}\n               className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500\"\n             >\n               <option value=\"active\">Active</option>\n               <option value=\"inactive\">Inactive</option>\n               <option value=\"lead\">Lead</option>\n             </select>\n             {errors.status && (\n               <p className=\"mt-1 text-sm text-red-600\">{errors.status.message}</p>\n             )}\n           </div>\n         </div>\n         \n         {/* Tags Multi-select */}\n         <div>\n           <label className=\"block text-sm font-medium text-gray-700\">\n             Tags\n           </label>\n           <Controller\n             name=\"tags\"\n             control={control}\n             defaultValue={[]}\n             render={({ field }) => (\n               <div>\n                 <div className=\"flex flex-wrap gap-2 mt-2\">\n                   {availableTags.map(tag => (\n                     <TagPills\n                       key={tag}\n                       label={tag}\n                       selected={field.value?.includes(tag)}\n                       onClick={() => {\n                         const currentTags = field.value || [];\n                         if (currentTags.includes(tag)) {\n                           field.onChange(currentTags.filter(t => t !== tag));\n                         } else {\n                           field.onChange([...currentTags, tag]);\n                         }\n                       }}\n                     />\n                   ))}\n                 </div>\n               </div>\n             )}\n           />\n         </div>\n         \n         {/* Notes Field */}\n         <div>\n           <label htmlFor=\"notes\" className=\"block text-sm font-medium text-gray-700\">\n             Notes\n           </label>\n           <textarea\n             id=\"notes\"\n             rows={4}\n             {...register('notes')}\n             className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500\"\n           />\n         </div>\n         \n         {/* Form Actions */}\n         <div className=\"flex justify-end space-x-3\">\n           <button\n             type=\"button\"\n             onClick={onCancel}\n             className=\"px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n           >\n             Cancel\n           </button>\n           <button\n             type=\"submit\"\n             disabled={isSubmitting}\n             className=\"px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50\"\n           >\n             {isSubmitting ? 'Saving...' : initialData.id ? 'Update Contact' : 'Create Contact'}\n           </button>\n         </div>\n       </form>\n     );\n   }\n   ```\n\n2. Implement the following features in the ContactForm component:\n   - Form validation using Zod schema\n   - React Hook Form integration for form state management\n   - Field-level error messages\n   - Company autocomplete with search functionality\n   - Tags multi-select using the TagPills component from shared UI\n   - Support for both create and edit modes based on initialData\n   - Responsive layout using Tailwind CSS grid\n\n3. Ensure the form handles the following fields:\n   - First Name (required)\n   - Last Name (required)\n   - Email (required, valid format)\n   - Phone (optional)\n   - Company (optional, with autocomplete)\n   - Status (required, select from options)\n   - Tags (optional, multi-select)\n   - Notes (optional, textarea)\n\n4. Implement proper TypeScript typing:\n   - Use Zod to infer the form value types\n   - Create appropriate interfaces for component props\n   - Ensure type safety for all form operations\n\n5. Add appropriate loading and error states:\n   - Disable submit button during form submission\n   - Show loading indicator when appropriate\n   - Handle validation errors with clear user feedback",
        "testStrategy": "To verify the correct implementation of the ContactForm component:\n\n1. Component Structure Verification:\n   - Confirm the ContactForm.tsx file exists in the components/contacts/ directory:\n     ```bash\n     ls -la components/contacts/ContactForm.tsx\n     ```\n   - Verify the component exports correctly:\n     ```bash\n     grep -E \"export default function ContactForm\" components/contacts/ContactForm.tsx\n     ```\n\n2. Form Validation Testing:\n   - Test form submission with empty required fields:\n     - Submit the form without filling in first name, last name, and email\n     - Verify error messages appear for each required field\n   - Test email validation:\n     - Enter an invalid email format (e.g., \"test@\" or \"test\")\n     - Verify the email validation error message appears\n   - Test form submission with valid data:\n     - Fill in all required fields with valid data\n     - Verify the form submits successfully and calls the onSubmit handler\n\n3. Multi-select Tags Testing:\n   - Click on various tags to select them\n   - Verify selected tags are visually indicated\n   - Click on selected tags to deselect them\n   - Verify the tags array in the form data updates correctly\n\n4. Company Autocomplete Testing:\n   - Type at least 3 characters in the company field\n   - Verify the dropdown appears with matching company results\n   - Select a company from the dropdown\n   - Verify the selected company appears as a chip/pill\n   - Test clearing the selected company\n   - Verify the company field resets correctly\n\n5. Form Mode Testing:\n   - Test the form in create mode (no initialData.id):\n     - Verify the submit button shows \"Create Contact\"\n     - Verify all fields are empty or have default values\n   - Test the form in edit mode (with initialData.id):\n     - Verify the submit button shows \"Update Contact\"\n     - Verify all fields are pre-populated with initialData values\n\n6. Responsive Layout Testing:\n   - Test the form on desktop viewport:\n     - Verify the form fields display in a two-column layout\n   - Test the form on mobile viewport:\n     - Verify the form fields collapse to a single column layout\n\n7. Integration Testing:\n   - Import the ContactForm component in a test environment\n   - Mock the onSubmit and onCancel handlers\n   - Render the component with and without initialData\n   - Verify the handlers are called with the correct parameters\n   - Test the form reset functionality when initialData changes",
        "status": "pending",
        "dependencies": [
          1,
          3
        ],
        "priority": "high",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-10-01T01:13:23.389Z",
      "updated": "2025-10-01T01:23:21.056Z",
      "description": "Contacts and Companies Management CRM modules implementation"
    }
  }
}