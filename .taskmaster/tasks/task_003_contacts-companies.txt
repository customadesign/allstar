# Task ID: 3
# Title: Create shared UI components for reusable elements
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Build a set of reusable UI components in the components/shared/ directory including SearchBar, StatusBadge, TagPills, Pagination, EmptyState, LoadingSpinner, and ConfirmDialog components with TypeScript interfaces and Tailwind CSS styling.
# Details:
This task involves creating a suite of reusable UI components that will be used across the Contacts and Companies modules:

1. Create the following components in the `components/shared/` directory:

   a. **SearchBar.tsx**:
   ```tsx
   interface SearchBarProps {
     placeholder?: string;
     initialValue?: string;
     onSearch: (value: string) => void;
     className?: string;
   }
   
   export default function SearchBar({ placeholder = 'Search...', initialValue = '', onSearch, className = '' }: SearchBarProps) {
     const [searchTerm, setSearchTerm] = useState(initialValue);
     
     // Implement debounced search using useEffect and setTimeout
     useEffect(() => {
       const timer = setTimeout(() => {
         onSearch(searchTerm);
       }, 300); // 300ms debounce delay
       
       return () => clearTimeout(timer);
     }, [searchTerm, onSearch]);
     
     return (
       <div className={`relative ${className}`}>
         <input
           type="text"
           value={searchTerm}
           onChange={(e) => setSearchTerm(e.target.value)}
           placeholder={placeholder}
           className="w-full px-4 py-2 pl-10 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
         />
         <SearchIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
       </div>
     );
   }
   ```

   b. **StatusBadge.tsx**:
   ```tsx
   type StatusType = 'active' | 'inactive' | 'pending' | 'completed' | 'error';
   
   interface StatusBadgeProps {
     status: StatusType;
     label?: string;
     className?: string;
   }
   
   export default function StatusBadge({ status, label, className = '' }: StatusBadgeProps) {
     const statusStyles: Record<StatusType, string> = {
       active: 'bg-green-100 text-green-800 border-green-200',
       inactive: 'bg-gray-100 text-gray-800 border-gray-200',
       pending: 'bg-yellow-100 text-yellow-800 border-yellow-200',
       completed: 'bg-blue-100 text-blue-800 border-blue-200',
       error: 'bg-red-100 text-red-800 border-red-200',
     };
     
     return (
       <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${statusStyles[status]} ${className}`}>
         {label || status}
       </span>
     );
   }
   ```

   c. **TagPills.tsx**:
   ```tsx
   interface Tag {
     id: string | number;
     label: string;
   }
   
   interface TagPillsProps {
     tags: Tag[];
     onRemove?: (tagId: string | number) => void;
     className?: string;
     editable?: boolean;
   }
   
   export default function TagPills({ tags, onRemove, className = '', editable = false }: TagPillsProps) {
     return (
       <div className={`flex flex-wrap gap-2 ${className}`}>
         {tags.map((tag) => (
           <span 
             key={tag.id}
             className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
           >
             {tag.label}
             {editable && onRemove && (
               <button
                 type="button"
                 onClick={() => onRemove(tag.id)}
                 className="ml-1.5 inline-flex items-center justify-center h-4 w-4 rounded-full text-blue-400 hover:bg-blue-200 hover:text-blue-600 focus:outline-none"
               >
                 <span className="sr-only">Remove tag</span>
                 <XIcon className="h-3 w-3" />
               </button>
             )}
           </span>
         ))}
       </div>
     );
   }
   ```

   d. **Pagination.tsx**:
   ```tsx
   interface PaginationProps {
     currentPage: number;
     totalPages: number;
     onPageChange: (page: number) => void;
     className?: string;
   }
   
   export default function Pagination({ currentPage, totalPages, onPageChange, className = '' }: PaginationProps) {
     const renderPageNumbers = () => {
       const pages = [];
       const maxVisiblePages = 5;
       
       // Logic to show current page and surrounding pages
       let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
       let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
       
       if (endPage - startPage + 1 < maxVisiblePages) {
         startPage = Math.max(1, endPage - maxVisiblePages + 1);
       }
       
       for (let i = startPage; i <= endPage; i++) {
         pages.push(
           <button
             key={i}
             onClick={() => onPageChange(i)}
             className={`px-3 py-1 mx-1 rounded ${
               currentPage === i
                 ? 'bg-blue-500 text-white'
                 : 'bg-white text-gray-700 hover:bg-gray-100'
             }`}
           >
             {i}
           </button>
         );
       }
       
       return pages;
     };
     
     return (
       <div className={`flex items-center justify-center my-4 ${className}`}>
         <button
           onClick={() => onPageChange(currentPage - 1)}
           disabled={currentPage <= 1}
           className="px-3 py-1 mx-1 rounded bg-white text-gray-700 hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed"
         >
           Previous
         </button>
         
         {renderPageNumbers()}
         
         <button
           onClick={() => onPageChange(currentPage + 1)}
           disabled={currentPage >= totalPages}
           className="px-3 py-1 mx-1 rounded bg-white text-gray-700 hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed"
         >
           Next
         </button>
       </div>
     );
   }
   ```

   e. **EmptyState.tsx**:
   ```tsx
   interface EmptyStateProps {
     title: string;
     message?: string;
     icon?: React.ReactNode;
     action?: React.ReactNode;
     className?: string;
   }
   
   export default function EmptyState({ title, message, icon, action, className = '' }: EmptyStateProps) {
     return (
       <div className={`flex flex-col items-center justify-center p-8 text-center ${className}`}>
         {icon && <div className="mb-4 text-gray-400">{icon}</div>}
         <h3 className="text-lg font-medium text-gray-900">{title}</h3>
         {message && <p className="mt-1 text-sm text-gray-500">{message}</p>}
         {action && <div className="mt-6">{action}</div>}
       </div>
     );
   }
   ```

   f. **LoadingSpinner.tsx**:
   ```tsx
   interface LoadingSpinnerProps {
     size?: 'small' | 'medium' | 'large';
     color?: 'primary' | 'secondary' | 'gray';
     className?: string;
   }
   
   export default function LoadingSpinner({ size = 'medium', color = 'primary', className = '' }: LoadingSpinnerProps) {
     const sizeClasses = {
       small: 'h-4 w-4',
       medium: 'h-8 w-8',
       large: 'h-12 w-12',
     };
     
     const colorClasses = {
       primary: 'text-blue-500',
       secondary: 'text-purple-500',
       gray: 'text-gray-500',
     };
     
     return (
       <div className={`flex justify-center items-center ${className}`}>
         <svg
           className={`animate-spin ${sizeClasses[size]} ${colorClasses[color]}`}
           xmlns="http://www.w3.org/2000/svg"
           fill="none"
           viewBox="0 0 24 24"
         >
           <circle
             className="opacity-25"
             cx="12"
             cy="12"
             r="10"
             stroke="currentColor"
             strokeWidth="4"
           ></circle>
           <path
             className="opacity-75"
             fill="currentColor"
             d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
           ></path>
         </svg>
       </div>
     );
   }
   ```

   g. **ConfirmDialog.tsx**:
   ```tsx
   interface ConfirmDialogProps {
     isOpen: boolean;
     onClose: () => void;
     onConfirm: () => void;
     title: string;
     message?: string;
     confirmText?: string;
     cancelText?: string;
     type?: 'danger' | 'warning' | 'info';
     className?: string;
   }
   
   export default function ConfirmDialog({
     isOpen,
     onClose,
     onConfirm,
     title,
     message,
     confirmText = 'Confirm',
     cancelText = 'Cancel',
     type = 'danger',
     className = '',
   }: ConfirmDialogProps) {
     if (!isOpen) return null;
     
     const typeStyles = {
       danger: 'bg-red-600 hover:bg-red-700',
       warning: 'bg-yellow-600 hover:bg-yellow-700',
       info: 'bg-blue-600 hover:bg-blue-700',
     };
     
     return (
       <div className="fixed inset-0 z-50 overflow-y-auto">
         <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
           <div className="fixed inset-0 transition-opacity" aria-hidden="true">
             <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
           </div>
           
           <span className="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
           
           <div className={`inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full ${className}`}>
             <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
               <div className="sm:flex sm:items-start">
                 <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                   <h3 className="text-lg leading-6 font-medium text-gray-900">{title}</h3>
                   {message && (
                     <div className="mt-2">
                       <p className="text-sm text-gray-500">{message}</p>
                     </div>
                   )}
                 </div>
               </div>
             </div>
             <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
               <button
                 type="button"
                 className={`w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 text-base font-medium text-white ${typeStyles[type]} focus:outline-none focus:ring-2 focus:ring-offset-2 sm:ml-3 sm:w-auto sm:text-sm`}
                 onClick={onConfirm}
               >
                 {confirmText}
               </button>
               <button
                 type="button"
                 className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                 onClick={onClose}
               >
                 {cancelText}
               </button>
             </div>
           </div>
         </div>
       </div>
     );
   }
   ```

2. Ensure all components:
   - Follow consistent design patterns from BaseLayout
   - Use Tailwind CSS for styling
   - Include proper TypeScript interfaces for props
   - Have appropriate default values for optional props
   - Are properly exported for use in other components

3. Create an index.ts file in the components/shared directory to export all components:
   ```tsx
   export { default as SearchBar } from './SearchBar';
   export { default as StatusBadge } from './StatusBadge';
   export { default as TagPills } from './TagPills';
   export { default as Pagination } from './Pagination';
   export { default as EmptyState } from './EmptyState';
   export { default as LoadingSpinner } from './LoadingSpinner';
   export { default as ConfirmDialog } from './ConfirmDialog';
   ```

4. Add necessary imports at the top of each component file:
   ```tsx
   import { useState, useEffect } from 'react';
   // Import any icons or other dependencies as needed
   ```

5. Document each component with JSDoc comments to explain their purpose and usage.

# Test Strategy:
To verify the correct implementation of the shared UI components:

1. Component File Verification:
   - Confirm all seven component files exist in the components/shared/ directory:
     ```bash
     ls -la components/shared/SearchBar.tsx components/shared/StatusBadge.tsx components/shared/TagPills.tsx components/shared/Pagination.tsx components/shared/EmptyState.tsx components/shared/LoadingSpinner.tsx components/shared/ConfirmDialog.tsx
     ```
   - Verify the index.ts file exists and exports all components correctly

2. TypeScript Validation:
   - Run TypeScript compiler to check for type errors:
     ```bash
     npx tsc --noEmit
     ```
   - Ensure each component has properly defined TypeScript interfaces for its props

3. Component Testing:
   - Create a test page that imports and renders each component with various props
   - For SearchBar: Test the debounce functionality by typing quickly and confirming the search callback is not called on every keystroke
   - For StatusBadge: Test with different status types to verify correct color coding
   - For TagPills: Test with both editable and non-editable modes, verify tag removal works
   - For Pagination: Test with different page counts and verify page navigation works correctly
   - For EmptyState: Test with and without optional props (icon, message, action)
   - For LoadingSpinner: Test with different sizes and colors
   - For ConfirmDialog: Test opening/closing and confirm/cancel actions

4. Responsive Design Testing:
   - Test all components at different viewport sizes to ensure they adapt correctly
   - Verify components maintain proper styling and functionality on mobile devices

5. Accessibility Testing:
   - Check that all components meet basic accessibility requirements
   - Verify proper contrast ratios for text elements
   - Ensure interactive elements have appropriate focus states
   - Test keyboard navigation for interactive components

6. Integration Testing:
   - Import and use components in at least one page from both the Contacts and Companies modules
   - Verify components work correctly when integrated with actual application data
